typeof 3;
<< "number"

typeof 3.141592654;
<< number

		NUMBER CONSTRUCTOR FUNCTION
		
		new Number (3)

OCTAL AND HEXADECIMAL NUMBERS

0xAF; // A respresents 10, F represents 15
<< 175

047; // 4 eights and 7 units
<< 39

EXPONENTIAL NOTATION

1e6; // means 1 multiplied by 10 to the power 6 (a million)
<< 2000

2E3; // can also be written as 2E3, 2E+3 and 2e+3
<< 1000000

2.5-3; //means 2.5 multiplied by 10 to the power -3 (0.001)
<< 0.0025

5..toExponential(); >> "5e+0"

5 .toExponential(); >> "5e+0"

5.0 toExponential(); >> "5e+0"

(5).toExponential(); >> "5e+0"

NUMBER METHODS

var number = 5;
>> 5

number.toExponential();
>> "5e+0"

var pi = 3.141592654;
<< undefined

pi.toFixed(3); // only one dot needed when using variables
<< "3.142"

325678..toPrecision(2);
<< "3.3e+5"

2.459.toPrecision(2)
<< "2.5"

ARITHMETIC OPERATIONS

Addition:

5 + 4.3;
<< 9.3

Subtraction:

6 - 11;
>> -5

Multiplication:

6 * 7;
<< 42

Division:

3/7;
<<0.42857142857142855

23%6 // the same as asking 'what is the remainder when 13 is divided by 6'
<< 5

-4%3 // -4 modulo 3 would be 2
<< -1

CHANGING VARIABLES

POINTS = 0; // initialize points score zero
<< 0

points = points + 10;
<< 10

points += 10;
<< 20

points -= 5; // decreases points by 5
<< 15 

points *= 2; // doubles points
<< 30 

points /= 3;  // divides values of points by 3
<< 10

points %= 7; // changes the value of points to the remainder if its current value is value is dividend by 7
<< 3

INCREMENTING VALUES

